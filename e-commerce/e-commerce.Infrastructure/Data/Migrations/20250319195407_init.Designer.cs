// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using e_commerce.Models;

#nullable disable

namespace e_commerce.Migrations
{
    [DbContext(typeof(Entity))]
    [Migration("20250319195407_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("e_commerce.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address_Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address_Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country_Id")
                        .HasColumnType("int");

                    b.Property<string>("Postal_Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Street_Number")
                        .HasColumnType("int");

                    b.Property<int>("Unit_Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Country_Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("e_commerce.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("e_commerce.Models.Order_Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Product_Item_Id")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Order_Id");

                    b.HasIndex("Product_Item_Id");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("e_commerce.Models.Order_Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("e_commerce.Models.Payment_Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("e_commerce.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Category_Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("e_commerce.Models.Product_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Parent_Category_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Parent_Category_Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("e_commerce.Models.Product_Configuration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Product_Item_Id")
                        .HasColumnType("int");

                    b.Property<int>("Variation_Option_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Product_Item_Id");

                    b.HasIndex("Variation_Option_Id");

                    b.ToTable("ProductConfigurations");
                });

            modelBuilder.Entity("e_commerce.Models.Product_Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Product_Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Qty_In_Stock")
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("e_commerce.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Discount_Rate")
                        .HasColumnType("int");

                    b.Property<DateTime>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("e_commerce.Models.Promotion_Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Promotion_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category_Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Promotion_Id");

                    b.ToTable("PromotionCategories");
                });

            modelBuilder.Entity("e_commerce.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordered_Product_Id")
                        .HasColumnType("int");

                    b.Property<int?>("Product_ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Rating_Value")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Ordered_Product_Id");

                    b.HasIndex("Product_ItemId");

                    b.HasIndex("User_Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("e_commerce.Models.Shipping_Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethods");
                });

            modelBuilder.Entity("e_commerce.Models.Shop_Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order_Status_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Order_Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Payment_Method_Id")
                        .HasColumnType("int");

                    b.Property<int>("Shipping_Address_Id")
                        .HasColumnType("int");

                    b.Property<int>("Shipping_Method_Id")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Order_Status_Id");

                    b.HasIndex("Payment_Method_Id");

                    b.HasIndex("Shipping_Address_Id");

                    b.HasIndex("Shipping_Method_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ShopOrders");
                });

            modelBuilder.Entity("e_commerce.Models.Shopping_Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User_Id");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("e_commerce.Models.Shopping_Cart_Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cart_Id")
                        .HasColumnType("int");

                    b.Property<int>("Product_Item_Id")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cart_Id");

                    b.HasIndex("Product_Item_Id");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("e_commerce.Models.Site_User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SiteUsers");
                });

            modelBuilder.Entity("e_commerce.Models.User_Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Address_Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Address_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("e_commerce.Models.User_Payment_Method", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Account_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("Payment_Type_Id")
                        .HasColumnType("int");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Payment_Type_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("UserPaymentMethods");
                });

            modelBuilder.Entity("e_commerce.Models.Variation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category_Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Category_Id");

                    b.ToTable("Variations");
                });

            modelBuilder.Entity("e_commerce.Models.Variation_Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Product_CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Variation_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Product_CategoryId");

                    b.HasIndex("Variation_Id");

                    b.ToTable("VariationOptions");
                });

            modelBuilder.Entity("e_commerce.Models.Address", b =>
                {
                    b.HasOne("e_commerce.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("Country_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("e_commerce.Models.Order_Line", b =>
                {
                    b.HasOne("e_commerce.Models.Shop_Order", "Shop_Order")
                        .WithMany("Order_Lines")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Product_Item", "Product_Item")
                        .WithMany("Order_Lines")
                        .HasForeignKey("Product_Item_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Item");

                    b.Navigation("Shop_Order");
                });

            modelBuilder.Entity("e_commerce.Models.Product", b =>
                {
                    b.HasOne("e_commerce.Models.Product_Category", "Product_Category")
                        .WithMany("Products")
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Category");
                });

            modelBuilder.Entity("e_commerce.Models.Product_Category", b =>
                {
                    b.HasOne("e_commerce.Models.Product_Category", "product_category")
                        .WithMany()
                        .HasForeignKey("Parent_Category_Id");

                    b.Navigation("product_category");
                });

            modelBuilder.Entity("e_commerce.Models.Product_Configuration", b =>
                {
                    b.HasOne("e_commerce.Models.Product_Item", "Product_Item")
                        .WithMany("Product_Configurations")
                        .HasForeignKey("Product_Item_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Variation_Option", "Variation_Option")
                        .WithMany("Product_Configurations")
                        .HasForeignKey("Variation_Option_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Item");

                    b.Navigation("Variation_Option");
                });

            modelBuilder.Entity("e_commerce.Models.Product_Item", b =>
                {
                    b.HasOne("e_commerce.Models.Product", "Product")
                        .WithMany("Product_Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("e_commerce.Models.Promotion_Category", b =>
                {
                    b.HasOne("e_commerce.Models.Product_Category", "Product_Category")
                        .WithMany("Promotion_Categories")
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Product", null)
                        .WithMany("Promotion_Categories")
                        .HasForeignKey("ProductId");

                    b.HasOne("e_commerce.Models.Promotion", "Promotion")
                        .WithMany("Promotion_Categories")
                        .HasForeignKey("Promotion_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Category");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("e_commerce.Models.Review", b =>
                {
                    b.HasOne("e_commerce.Models.Order_Line", "Order_Line")
                        .WithMany()
                        .HasForeignKey("Ordered_Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Product_Item", "Product_Item")
                        .WithMany("Reviews")
                        .HasForeignKey("Product_ItemId");

                    b.HasOne("e_commerce.Models.Site_User", "Site_User")
                        .WithMany("Reviews")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order_Line");

                    b.Navigation("Product_Item");

                    b.Navigation("Site_User");
                });

            modelBuilder.Entity("e_commerce.Models.Shop_Order", b =>
                {
                    b.HasOne("e_commerce.Models.Order_Status", "Order_Status")
                        .WithMany()
                        .HasForeignKey("Order_Status_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.User_Payment_Method", "User_Payment_Method")
                        .WithMany()
                        .HasForeignKey("Payment_Method_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Shipping_Address_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Shipping_Method", "Shipping_Method")
                        .WithMany("Shop_Orders")
                        .HasForeignKey("Shipping_Method_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Site_User", "Site_User")
                        .WithMany("Shop_Orders")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Order_Status");

                    b.Navigation("Shipping_Method");

                    b.Navigation("Site_User");

                    b.Navigation("User_Payment_Method");
                });

            modelBuilder.Entity("e_commerce.Models.Shopping_Cart", b =>
                {
                    b.HasOne("e_commerce.Models.Site_User", "Site_User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site_User");
                });

            modelBuilder.Entity("e_commerce.Models.Shopping_Cart_Item", b =>
                {
                    b.HasOne("e_commerce.Models.Shopping_Cart", "Shopping_Cart")
                        .WithMany("Shopping_Cart_Items")
                        .HasForeignKey("Cart_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Product_Item", "Product_Item")
                        .WithMany("Shopping_Cart_Items")
                        .HasForeignKey("Product_Item_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Item");

                    b.Navigation("Shopping_Cart");
                });

            modelBuilder.Entity("e_commerce.Models.User_Address", b =>
                {
                    b.HasOne("e_commerce.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Address_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Site_User", "Site_User")
                        .WithMany("User_Addresses")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Site_User");
                });

            modelBuilder.Entity("e_commerce.Models.User_Payment_Method", b =>
                {
                    b.HasOne("e_commerce.Models.Payment_Type", "Payment_Type")
                        .WithMany()
                        .HasForeignKey("Payment_Type_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("e_commerce.Models.Site_User", "Site_User")
                        .WithMany("User_Payment_Methods")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment_Type");

                    b.Navigation("Site_User");
                });

            modelBuilder.Entity("e_commerce.Models.Variation", b =>
                {
                    b.HasOne("e_commerce.Models.Product_Category", "Product_Category")
                        .WithMany()
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product_Category");
                });

            modelBuilder.Entity("e_commerce.Models.Variation_Option", b =>
                {
                    b.HasOne("e_commerce.Models.Product_Category", null)
                        .WithMany("Variation_Options")
                        .HasForeignKey("Product_CategoryId");

                    b.HasOne("e_commerce.Models.Variation", "Variation")
                        .WithMany()
                        .HasForeignKey("Variation_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variation");
                });

            modelBuilder.Entity("e_commerce.Models.Product", b =>
                {
                    b.Navigation("Product_Items");

                    b.Navigation("Promotion_Categories");
                });

            modelBuilder.Entity("e_commerce.Models.Product_Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Promotion_Categories");

                    b.Navigation("Variation_Options");
                });

            modelBuilder.Entity("e_commerce.Models.Product_Item", b =>
                {
                    b.Navigation("Order_Lines");

                    b.Navigation("Product_Configurations");

                    b.Navigation("Reviews");

                    b.Navigation("Shopping_Cart_Items");
                });

            modelBuilder.Entity("e_commerce.Models.Promotion", b =>
                {
                    b.Navigation("Promotion_Categories");
                });

            modelBuilder.Entity("e_commerce.Models.Shipping_Method", b =>
                {
                    b.Navigation("Shop_Orders");
                });

            modelBuilder.Entity("e_commerce.Models.Shop_Order", b =>
                {
                    b.Navigation("Order_Lines");
                });

            modelBuilder.Entity("e_commerce.Models.Shopping_Cart", b =>
                {
                    b.Navigation("Shopping_Cart_Items");
                });

            modelBuilder.Entity("e_commerce.Models.Site_User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Shop_Orders");

                    b.Navigation("User_Addresses");

                    b.Navigation("User_Payment_Methods");
                });

            modelBuilder.Entity("e_commerce.Models.Variation_Option", b =>
                {
                    b.Navigation("Product_Configurations");
                });
#pragma warning restore 612, 618
        }
    }
}
